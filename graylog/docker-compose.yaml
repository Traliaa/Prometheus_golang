version: "3.9"
services:
    apm-server:
      image: docker.elastic.co/apm/apm-server:7.15.1
      cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
      cap_drop: ["ALL"]
      ports:
        - 8200:8200
      networks:
        - elastic
      command: >
        apm-server -e
          -E apm-server.rum.enabled=true
          -E setup.kibana.host=kibana:5601
          -E setup.template.settings.index.number_of_replicas=0
          -E apm-server.kibana.enabled=true
          -E apm-server.kibana.host=kibana:5601
          -E output.elasticsearch.hosts=["elasticsearch:9200"]
      healthcheck:
        interval: 10s
        retries: 12
        test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

    elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
      volumes:
        - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/config.yml
        - elasticsearch_data:/usr/share/elasticsearch/data
      ports:
        - "9200:9200"
      environment:
        ES_JAVA_OPTS: "-Xmx256m -Xms256m"
        ELASTIC_PASSWORD: elasticPass
        # Use single node discovery in order to disable production mode and avoid bootstrap checks.
        # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
        discovery.type: single-node
      networks:
        - elastic
      healthcheck:
        interval: 20s
        retries: 10
        test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

    kibana:
        image: "docker.elastic.co/kibana/kibana:7.15.1"
        volumes:
          - ./config/kibana.yml:/usr/share/kibana/config/config.yml
        ports:
          - "5601:5601"
        networks:
          - elastic
        depends_on:
          - elasticsearch
        healthcheck:
          interval: 10s
          retries: 20
          test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

    filebeat:
        image: "docker.elastic.co/beats/filebeat:7.15.1"
        user: root
        volumes:
            - ./config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
            - /var/lib/docker:/var/lib/docker:ro
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - elastic
        depends_on:
          - elasticsearch


    golang:
      build:
        context: golang/
#      labels:
#        co.elastic.logs/enabled: true
#        co.elastic.logs/json.keys_under_root: true
#        co.elastic.logs/json.overwrite_keys: true
#        co.elastic.logs/json.add_error_key: true
#        co.elastic.logs/json.expand_keys: true
      environment:
        ELASTIC_APM_SERVER_URL: http://apm-server:8200
      networks:
        - elastic
      ports:
        - "83:83"
        - "84:84"

    jaeger:
      image: jaegertracing/all-in-one:latest
      ports:
        - "5775:5775/udp"
        - "6831:6831/udp"
        - "6832:6832/udp"
        - "5778:5778"
        - "16686:16686"
        - "14268:14268"
        - "9411:9411"
      networks:
        - elastic
volumes:
    elasticsearch_data:
networks:
  elastic:
    driver: bridge